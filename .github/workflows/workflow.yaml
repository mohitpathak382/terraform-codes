name: 'IaC Workflow | Terraform'

on:
  pull_request:
    branches:
      - main  # Trigger when a PR targets main branch
    types:
      - opened
      - closed
      - synchronize

permissions:
  contents: read
  id-token: write

env:
  WIF_PROVIDER: 'projects/288657159168/locations/global/workloadIdentityPools/githubactionspool/providers/test-github-actions'
  SA: 'xyz-345@quantiphi-test-470710.iam.gserviceaccount.com'
  ACCESS_TOKEN_LIFETIME: 900s
  GCP_PROJECT: 'quantiphi-test-470710'

jobs:
  terraform_plan:
    name: 'Terraform | Plan'
    runs-on: ubuntu-latest

    outputs:
      changed_files: ${{ steps.changed-dirs-files.outputs.FOLDER_LIST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2.0.0
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SA }}
          access_token_lifetime: ${{ env.ACCESS_TOKEN_LIFETIME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Get list of changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files_ignore: |
            .github/**
            bobm-landing-zone/Modules/**
          files: |
            **.tf
            **.tfvars  

      - name: Get list of changed top-level directories
        id: changed-dirs-files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "${ALL_CHANGED_FILES}" | tr ' ' '\n' | sed 's|\(.*\)/.*|\1|' | sort -u > changed-dirs.txt
          FOLDER=$(cat changed-dirs.txt | sort -u | tr '\n' ' ')
          echo "FOLDER_LIST=$FOLDER"
          echo "FOLDER_LIST=$FOLDER" >> $GITHUB_OUTPUT

      - name: Generate Dynamic Secrets Configuration
        run: |
          # Create a Python script to generate terraform.tfvars with secrets
          cat > generate_secrets.py << 'EOF'
          import json
          import os

          def main():
              try:
                  with open('secrets-config.json', 'r') as f:
                      config = json.load(f)
              except FileNotFoundError:
                  print("No secrets-config.json found, skipping dynamic secrets")
                  return

              tfvars_content = []

              # Static secrets from GitHub Secrets
              static_secrets = {
                  'my_preshared_secret': '${{ secrets.MY_PRESHARED_SECRET }}',
                  'palo_ssh_key': '${{ secrets.TF_VAR_PALO_SSH_KEY }}',
                  'mysql_root_password': '${{ secrets.MYSQL_ROOT_PASSWORD }}',
                  'postgres_root_password': '${{ secrets.POSTGRES_ROOT_PASSWORD }}'
              }

              for key, value in static_secrets.items():
                  if value and value != '${{ secrets. }}':
                      tfvars_content.append(f'{key} = "{value}"')

              # Dynamic secrets from JSON config
              for app, secrets_list in config.items():
                  print(f"Processing secrets for application: {app}")
                  for secret_name in secrets_list:
                      secret_value = os.environ.get(f'SECRET_{secret_name}', '')
                      if secret_value:
                          tf_var_name = secret_name.lower()
                          tfvars_content.append(f'{tf_var_name} = "{secret_value}"')
                          print(f"Added {tf_var_name} to terraform variables")
                      else:
                          print(f"Warning: Secret {secret_name} not found in environment")

              # Write terraform.tfvars file
              with open('terraform.tfvars', 'w') as f:
                  f.write('\n'.join(tfvars_content))

              # Create variables_generated.tf file
              variables_tf_content = []
              for line in tfvars_content:
                  var_name = line.split(' = ')[0]
                  variables_tf_content.append(f'''
                    variable "{var_name}" {{
                      description = "Secret variable for {var_name}"
                      type        = string
                      sensitive   = true
                    }}
                    ''')
              with open('variables_generated.tf', 'w') as f:
                  f.write('\n'.join(variables_tf_content))

          if __name__ == "__main__":
              main()
          EOF

          python generate_secrets.py
        env:
          # GitHub secrets with SECRET_ prefix for Python script
          SECRET_SKY_EYE_DB_PASSWORD: ${{ secrets.SKY_EYE_DB_PASSWORD }}
          SECRET_SKY_EYE_NACOS_PASSWORD: ${{ secrets.SKY_EYE_NACOS_PASSWORD }}
          # Add additional secrets as needed here

      - name: Terraform Init & Plan
        run: |
          FOLDER_LIST=$(echo "${{ steps.changed-dirs-files.outputs.FOLDER_LIST }}" | tr ' ' '\n')
          for folder in $FOLDER_LIST; do
            echo "Processing folder: $folder"
            cd $folder
            cp ../terraform.tfvars . 2>/dev/null || echo "No terraform.tfvars to copy"
            cp ../variables_generated.tf . 2>/dev/null || echo "No variables_generated.tf to copy"
            terraform fmt -recursive .
            terraform init
            terraform plan -var-file="terraform.tfvars" -out=tfplan
            cd -
          done

  terraform_apply:
    name: 'Terraform | Apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    if: ${{ github.event.pull_request.merged == true }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2.0.0  
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SA }}
          access_token_lifetime: ${{ env.ACCESS_TOKEN_LIFETIME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Generate Dynamic Secrets Configuration
        run: |
          # Repeat the secrets generation script for apply job
          cat > generate_secrets.py << 'EOF'
          import json
          import os

          def main():
              try:
                  with open('secrets-config.json', 'r') as f:
                      config = json.load(f)
              except FileNotFoundError:
                  print("No secrets-config.json found, skipping dynamic secrets")
                  return

              tfvars_content = []

              static_secrets = {
                  'my_preshared_secret': '${{ secrets.MY_PRESHARED_SECRET }}',
                  'palo_ssh_key': '${{ secrets.TF_VAR_PALO_SSH_KEY }}',
                  'mysql_root_password': '${{ secrets.MYSQL_ROOT_PASSWORD }}',
                  'postgres_root_password': '${{ secrets.POSTGRES_ROOT_PASSWORD }}'
              }

              for key, value in static_secrets.items():
                  if value and value != '${{ secrets. }}':
                      tfvars_content.append(f'{key} = "{value}"')

              for app, secrets_list in config.items():
                  for secret_name in secrets_list:
                      secret_value = os.environ.get(f'SECRET_{secret_name}', '')
                      if secret_value:
                          tf_var_name = secret_name.lower()
                          tfvars_content.append(f'{tf_var_name} = "{secret_value}"')

              with open('terraform.tfvars', 'w') as f:
                  f.write('\n'.join(tfvars_content))

          if __name__ == "__main__":
              main()
          EOF

          python generate_secrets.py
        env:
          SECRET_SKY_EYE_DB_PASSWORD: ${{ secrets.SKY_EYE_DB_PASSWORD }}
          SECRET_SKY_EYE_NACOS_PASSWORD: ${{ secrets.SKY_EYE_NACOS_PASSWORD }}

      - name: Terraform Apply
        run: |
          FOLDER_LIST=$(echo "${{ needs.terraform_plan.outputs.changed_files }}" | tr ' ' '\n')
          for folder in $FOLDER_LIST; do
            echo "Applying changes in folder: $folder"
            cd $folder
            cp ../terraform.tfvars . 2>/dev/null || echo "No terraform.tfvars to copy"
            cp ../variables_generated.tf . 2>/dev/null || echo "No variables_generated.tf to copy"
            terraform init
            terraform apply -var-file="terraform.tfvars" -auto-approve
            cd -
          done
