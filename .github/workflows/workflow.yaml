name: 'IaC Workflow | Terraform'

on:
  pull_request:
    branches: [main]
    types: [opened, closed, synchronize]

permissions:
  contents: read
  id-token: write

env:
  WIF_PROVIDER: 'projects/713812384570/locations/global/workloadIdentityPools/gh-wif-bobm-pool-v2/providers/gh-wif-bobm-provider-v2'
  SA: 'sa-bobm-terraform-iac@prj-bobm-shared-automation.iam.gserviceaccount.com'
  ACCESS_TOKEN_LIFETIME: 900s
  GCP_PROJECT: 'prj-bobm-shared-automation'

jobs:
  terraform_plan:
    name: 'Terraform | Plan'
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed-dirs-files.outputs.FOLDER_LIST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2.0.0
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SA }}
          access_token_lifetime: ${{ env.ACCESS_TOKEN_LIFETIME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Get list of changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files_ignore: |
            .github/**
            Modules/**
          files: |
            **.tf
            **.tfvars

      - name: Get list of changed top-level directories
        id: changed-dirs-files
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | sed 's|\(.*\)/.*|\1|' | sort -u > changed-dirs.txt
          echo "FOLDER_LIST=$(cat changed-dirs.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Create GCP Secrets & Generate terraform.tfvars
        run: |
          echo "Reading secrets from secret-list.yaml..."
          
          if [ ! -f secret-list.yaml ]; then
            echo "❌ secret-list.yaml not found!"
            exit 1
          fi

          echo "" > terraform.tfvars

          # Extract secrets list from YAML
          SECRET_LIST=$(yq '.secrets[]' secret-list.yaml)

          for secret in $SECRET_LIST; do
            tf_var_name=$(echo "$secret" | tr '[:upper:]' '[:lower:]')
            secret_env_var="GCP_SM_${secret}"

            # GitHub secrets can only be accessed via ${{ secrets.<name> }}
            echo "::add-mask::${{ secrets[format('GCP_SM_%s', secret)] }}"
            secret_value="${{ secrets[format('GCP_SM_%s', secret)] }}"

            if [ -z "$secret_value" ]; then
              echo "⚠️ Secret GCP_SM_${secret} not found in GitHub Secrets"
              continue
            fi

            echo "$tf_var_name = \"$secret_value\"" >> terraform.tfvars

            # Create/update in GCP Secret Manager
            if ! gcloud secrets describe "$secret" --project="${GCP_PROJECT}" >/dev/null 2>&1; then
              echo "🆕 Creating secret $secret"
              gcloud secrets create "$secret" --replication-policy="automatic" --project="${GCP_PROJECT}"
            fi

            echo -n "$secret_value" | gcloud secrets versions add "$secret" --data-file=- --project="${GCP_PROJECT}"
          done

          echo "✅ Generated terraform.tfvars:"
          cat terraform.tfvars
        shell: bash

      - name: Terraform Init & Plan
        run: |
          FOLDER_LIST=$(echo "${{ steps.changed-dirs-files.outputs.FOLDER_LIST }}" | tr ' ' '\n')
          for folder in $FOLDER_LIST; do
            echo "Running Terraform in $folder"
            cd "$folder"
            cp ../terraform.tfvars . || true
            terraform init
            terraform plan -var-file="terraform.tfvars" -out=tfplan
            cd -
          done

  terraform_apply:
    name: 'Terraform | Apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    if: ${{ github.event.pull_request.merged == true }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2.0.0
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SA }}
          access_token_lifetime: ${{ env.ACCESS_TOKEN_LIFETIME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Terraform Apply
        run: |
          FOLDER_LIST=$(echo "${{ needs.terraform_plan.outputs.changed_files }}" | tr ' ' '\n')
          for folder in $FOLDER_LIST; do
            echo "Running Terraform Apply in $folder"
            cd "$folder"
            cp ../terraform.tfvars . || true
            terraform init
            terraform apply -var-file="terraform.tfvars" -auto-approve
            cd -
          done
